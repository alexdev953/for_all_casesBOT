from aiogram.dispatcher import FSMContext
from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from loader import dp, bot
from ..utilities import markup, insta_grabber, yt_download, weather_in_city
from for_all_casses import db
import logging
from for_all_casses import loop

logger = logging.getLogger('state_handler')

# Inline Keyboard settings
keyboard_inline = types.InlineKeyboardMarkup(row_width=1)
keyboard_inline.add(types.InlineKeyboardButton('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data=f'‚ùåno'))


class NextStep(StatesGroup):
    waiting_for_city_name = State()
    waiting_for_insta_url = State()
    waiting_for_yt_url = State()


@dp.message_handler(text=['üå§ –ü–æ–≥–æ–¥–∞', 'ü§≠ Insta_grabber', 'üì∫ YouTube Music (beta)'], state='*')
async def take_button(message: types.Message):
    db.last_uses(message.from_user.id)
    if message.text == 'üå§ –ü–æ–≥–æ–¥–∞':
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞: ", reply_markup=keyboard_inline)
        await NextStep.waiting_for_city_name.set()
    elif message.text == 'ü§≠ Insta_grabber':
        await message.answer('–í—Å—Ç–∞–≤—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ', reply_markup=keyboard_inline)
        await NextStep.waiting_for_insta_url.set()
    elif message.text == 'üì∫ YouTube Music (beta)':

        await message.answer('–í—Å—Ç–∞–≤—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ.\n –§—É–Ω–∫—Ü—ñ—è –Ω–∞ —Å—Ç–∞–¥—ñ—ó —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è üë®üèª‚Äçüíª',
                             reply_markup=keyboard_inline)
        await NextStep.waiting_for_yt_url.set()


@dp.message_handler(state=NextStep.waiting_for_city_name, content_types=types.ContentTypes.TEXT)
async def check_city(message: types.Message, state: FSMContext):
    answer_msg = weather_in_city(message.text)
    await state.finish()
    await message.answer(answer_msg, reply_markup=markup)


@dp.message_handler(state=NextStep.waiting_for_insta_url, content_types=types.ContentTypes.TEXT)
async def take_insta_url(message: types.Message, state: FSMContext):
    answer_msg = insta_grabber(message.text)
    await message.answer(answer_msg)
    await state.finish()


@dp.message_handler(state=NextStep.waiting_for_yt_url, content_types=types.ContentTypes.TEXT)
async def take_yt_url_2(message: types.Message, state: FSMContext):
    url = message.text
    await state.finish()
    if len(url.split('/')) > 1 and url.find('you') != -1:
        await message.answer('–¢–≤–æ—Ä–∏—Ç—å—Å—è –º–∞–≥—ñ—è üí´ —ñ –≤—ñ–¥–µ–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –≤ –º—É–∑–∏–∫—É',
                             disable_notification=True)
        music_url = await loop.run_in_executor(None, yt_download, url)
        logger.debug(f'MUSIC_URL{music_url}')
        if str(music_url) == 'Error download':
            await message.answer('–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ üôà, –∑–≤–µ—Ä–Ω—ñ—Ç—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n'
                                 '/toadmin —Ç–µ–∫—Å—Ç –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è')
        elif str(music_url) == 'Error lenght':
            await message.answer('–í—ñ–¥–µ–æ –¥–æ–≤—à–µ 15 —Ö–≤–∏–ª–∏–Ω, –Ω–∞–∂–∞–ª—å —Ü–µ –¥—É–∂–µ –¥–æ–≤–≥–æ ü§•')
        else:
            await bot.send_chat_action(message.from_user.id, 'upload_audio')
            await message.answer('–ô–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∞—É–¥—ñ–æ üì§ ', disable_notification=True)
            await bot.send_audio(message.from_user.id, open(str(music_url[0]), 'rb'),
                                 title=music_url[1], thumb=open(music_url[2], 'rb'), reply_markup=markup)


@dp.callback_query_handler(text_startswith='‚ùåno', state='*')
async def state_cancel(query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await query.answer("–û—Ö—Ä–∞–Ω–∞ –æ—Ç–º—î–Ω–∞ üòé")
    await bot.edit_message_reply_markup(query.from_user.id, query.message.message_id)
