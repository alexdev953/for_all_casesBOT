from aiogram import types
from bs4 import BeautifulSoup
import psycopg2
import logging
from bot_config import *
from pytube import YouTube
import ffmpeg
from eyed3.id3 import Tag
import requests
from loader import owm, bot
import urllib.request

logger = logging.getLogger('utilities')

markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup.add('ü§≠ Insta_grabber', 'üì∫ YouTube Music (beta)')
markup.add('üé≤ –í–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ', 'ü§ñ –í–∞—à chat_id', 'üå§ –ü–æ–≥–æ–¥–∞')
markup.add('üìä –ö—É—Ä—Å –í–∞–ª—é—Ç –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ')


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≥–∞–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –∑ –Ω–∞–∑–≤–∏(–ø—ñ—Å–Ω—ñ, –≤—ñ–¥–µ–æ)
def good_name(name: str) -> str:
    list_with_bad_symbols = list('*.?,:/|$')
    for symbols in list_with_bad_symbols:

        name = name.replace(symbols, '')
    return name


def weather_in_city(city: str) -> str:
    try:
        observation = owm.weather_at_place(city)
        w = observation.get_weather()
        h = w.get_humidity()
        t = w.get_temperature('celsius')["temp"]
        wind = w.get_wind()["speed"]
        answer_msg = f"–í {city} –∑–∞—Ä–∞–∑: \n{w.get_detailed_status()} \nüí¶ –í–æ–ª–æ–≥—ñ—Å—Ç—å : {h}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ :" \
                     f" {t}\nüéè –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: {wind} –º/—Å"
        return answer_msg
    except Exception:
        return '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ üôà'


def yt_download(message_url: str):
    logger.debug(message_url)
    try:
        yt = YouTube(message_url)
        name_music = yt.title
        length_video_min = yt.length // 60
        while name_music == 'YouTube':
            yt = YouTube(message_url)
            name_music = yt.title
            length_video_min = yt.length // 60
        if length_video_min >= 16:
            return 'Error length'
        preview_thumb = jpeg_download(yt.thumbnail_url, name_music)
        name_music = f"{good_name(yt.title)}.mp4"
        yt.streams.get_audio_only().download(output_path=f"/home/apache/servers/SMB/downloads/music_bot/yt_video/")
        dwn_dir = f'/home/apache/servers/SMB/downloads/music_bot/{name_music.replace(".mp4", ".mp3")}'
        logger.info(dwn_dir)
        logger.info(name_music)
        (
            ffmpeg
                .input(f"/home/apache/servers/SMB/downloads/music_bot/yt_video/{name_music}")
                .output(f'{dwn_dir}', **{'qscale:a': 1})
                .overwrite_output()
                .run()
        )
    except Exception as error:
        logger.error(f"Error in yt_download{error}")
        return 'Error download'
    return dwn_dir, name_music, preview_thumb


def jpeg_download(url, jpeg_name):
    jpeg_path = f"/home/apache/servers/SMB/downloads/music_bot/yt_video/THUMBS/{jpeg_name}.jpg"
    urllib.request.urlretrieve(url, jpeg_path)
    return jpeg_path


def music_naming(path_to_file, music_performer, music_title):
    logger.info(path_to_file)
    audiofile = Tag()
    logger.info(audiofile)
    audiofile.parse(path_to_file)
    audiofile.artist = f"{music_performer}"
    audiofile.title = f"{music_title}"
    audiofile.save()
    logger.info(f'New audio attribute: Artist: {audiofile.artist}, Title: {audiofile.title}')


async def download_music(file):
    file_id = file.file_id
    file_get = await bot.get_file(file_id=file_id)
    file_path = file_get.file_path
    music_performer = good_name(file.performer)
    music_title = good_name(file.title)
    download_path = f'/home/apache/servers/SMB/downloads/music_bot/renameToBot/' \
                    f'{music_performer} - {music_title}.mp3'
    await bot.download_file(file_path, download_path)
    try:
        music_naming(download_path, music_performer, music_title)
    except Exception as e:
        logger.error(f'Error in music_naming: {e}')
    return download_path


def help_user():
    answer = '–î–∞–Ω–∏–π –±–æ—Ç –º–∞—î –¥–µ—â–æ —Ü—ñ–∫–∞–≤–µ –¥–ª—è —Ç–µ–±–µ, –∑–Ω–∏–∑—É —î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏.\n' \
             '‚ö™Ô∏è –î–ª—è –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ –∑ Youtube –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å (üì∫ YouTube Music),' \
             ' –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ –≤—Å—Ç–∞–≤—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ –∑ —è–∫–æ–≥–æ ' \
             '–ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç—è–≥–Ω—É—Ç–∏ –∞—É–¥—ñ–æ.\n‚ö™Ô∏è –î–ª—è —Å—Ç—è–≥–Ω–µ–Ω–Ω—è —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ ' \
             '–∑ Instagram –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å (ü§≠ Insta_grabber) —Ç–∞ –≤—Å—Ç–∞–≤—Ç–µ ' \
             '–ø–æ—Å–∏–ª–∞–Ω–Ω—è (–ü—Ä–æ—Ñ—ñ–ª—å –∑–≤—ñ–¥–∫–∏ –±—É–¥–µ —Å—Ç—è–≥—É–≤–∞—Ç–∏—Å—è —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º üôä)\n' \
             '‚ö™Ô∏è –¢–∞–∫–æ–∂ —è –º–æ–∂—É –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É –≤–∏–∫–æ–Ω–∞–≤—Ü—è –ø—ñ—Å–Ω—ñ –Ω–∞ —Ç—É —è–∫—É –≤–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ (–±—É–¥–µ —Ü—ñ–∫–∞–≤–µ —Ç–∏–º –≤ –∫–æ–≥–æ —î —Å–≤—ñ–π ' \
             '–º—É–∑–∏—á–Ω–∏–π –∫–∞–Ω–∞–ª –∞–±–æ –≥—Ä—É–ø–∞), —â–æ–± —Ü–µ –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ /toadmin –¢–ï–ö–°–¢ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è\n' \
             '‚ö™Ô∏è –ö–Ω–æ–ø–∫–∞ (üé≤ –í–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ) –ø–æ–≤–µ—Ä—Ç–∞—î –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 100\n' \
             '‚ö™Ô∏è –î–ª—è —Ç–æ–≥–æ —â–æ–± —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞—à –Ü–ú–¢ (–Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞) –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /imt —É —Ñ–æ—Ä–º–∞—Ç—ñ ' \
             '–í–∞–≥–∞(–ö–ì,–ì) –ó—Ä—ñ—Å—Ç(–ú,–°–ú)\n<b>–ù–∞–ø—Ä–∏–∫–ª–∞–¥:</b> /imt 80,0 1,75\n' \
             '‚ö™Ô∏è –î–ª—è –ø–æ—à—É–∫—É –º–æ–¥–µ–ª—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /imei IMEI —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n' \
             '<b>–ù–∞–ø—Ä–∏–∫–ª–∞–¥:</b> /imei 12345678912345'

    return answer


class CheckIMEI:

    def __init__(self):
        self.headers = {"authority": "xinit.ru",
                        "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
                                      "(KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36",
                        "accept": "*/*",
                        "sec-fetch-site": "same-origin",
                        "sec-fetch-mode": "sec-fetch-mode",
                        "sec-fetch-dest": "sec-fetch-dest",
                        "referer": "https://xinit.ru/imei/",
                        "accept-language": "uk,ru-RU;q=0.9,ru;q=0.8,en-US;q=0.7,en;q=0.6",
                        "cookie": "_ga=GA1.2.1458043199.1587534621; _gid=GA1.2.1008845724.1593671486"}

    def web_check_imei(self, imei):
        """
        –§-—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ IMEI –Ω–∞ —Å–∞–π—Ç—ñ
        :param imei:
        :return:
        """
        info_imei_list = []
        info_imei_atr = []
        url_base = f'https://xinit.ru/api/imei/{imei}'
        # Check valid cert
        try:
            response = requests.get(url_base, headers=self.headers)
        except requests.exceptions.SSLError:
            logger.warning(f'–ü–æ–≥–∞–Ω–∏–π —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –¥–ª—è —Å–∞–π—Ç–∞: {url_base}')
            response = requests.get(url_base, headers=self.headers, verify=False)

        # TODO –ü–µ—Ä–µ–¥–∏–≤–∏—Ç–∏—Å—è –¥–∞–Ω–∏–π if (–º–æ–∂–ª–∏–≤–æ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —ñ–Ω—à—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É)
        if response.json() is None or len(response.json()) == 1:
            return f'<b>IMEI: </b>{self.imei_check_num(imei[0:14])} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò•'
        else:

            for values in response.json()[1:4]:
                info_imei_atr.append(values['info'])
                info_imei_list.append(f"üì± {values['info']}")
            str_to_bot = '\n\n'.join(info_imei_list)
            return f"<b>–ú–æ–±—ñ–ª—å–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b>\n<b>IMEI: </b>{self.imei_check_num(imei[0:14])}\n\n{str_to_bot}"

    @staticmethod
    def imei_check_num(imei: str) -> str:
        """–§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Ü–∏—Ñ—Ä–∏ –≤ IMEI"""
        imei_l = list(imei)
        sum_second = 0
        check_numb = 0
        for second_val in imei_l[1::2]:
            sum_second1 = int(second_val) + int(second_val)
            if len(str(sum_second1)) == 2:
                sum_second1 = int(str(sum_second1)[0]) + int(str(sum_second1)[1])
            sum_second += sum_second1
        for first_val in imei_l[0::2]:
            sum_second += int(first_val)
        while sum_second % 10 != 0:
            for check_sum in range(10):
                find_check_sum = sum_second
                checking_sum = find_check_sum + check_sum
                if checking_sum % 10 == 0:
                    sum_second += check_sum
                    check_numb = check_sum
        return f"{imei}{check_numb}"


def check_imt(imt):
    good_str = imt.replace(',', '.').split()
    try:
        imt_kg = float(good_str[0])
        imt_m = float(good_str[1])
    except TypeError:
        return "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –î–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!!! " \
               "–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ –í–∞–≥–∞(–ö–ì,–ì) –ó—Ä—ñ—Å—Ç(–ú,–°–ú) –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ /imt 80,0 1,75"
    imt_result = round(imt_kg / (imt_m ** 2), 2)
    imt_info = None
    if imt_result < 18.5:
        imt_info = '–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –≤–∞–≥–∞ü§≠'
    elif 18.6 < imt_result < 24.9:
        imt_info = '–Ω–æ—Ä–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞üòÉ'
    elif 25 < imt_result < 29.9:
        imt_info = '–ø–µ—Ä–µ–¥–æ–∂–∏—Ä—ñ–Ω–Ω—è (–ì–ª–∞–¥–∫—ñ—Å—Ç—å)ü§´'
    elif 30 < imt_result < 34.9:
        imt_info = '–æ–∂–∏—Ä—ñ–Ω–Ω—è I —Å—Ç—É–ø–µ–Ω—èüò¨'
    elif 35 < imt_result < 39.9:
        imt_info = '–æ–∂–∏—Ä—ñ–Ω–Ω—è II —Å—Ç—É–ø–µ–Ω—èüò®'
    elif imt_result > 40:
        imt_info = '–æ–∂–∏—Ä—ñ–Ω–Ω—è III —Å—Ç—É–ø–µ–Ω—èüò±'
    return f'–í–∞—à –Ü–ú–¢: {imt_result}\n–£ –≤–∞—Å {imt_info}'


def check_curency():
    """–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫—É—Ä—Å—É –≤–∞–ª—é—Ç –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"""
    page = requests.get(URL_CURRENCY)
    if page:
        list_currency = []
        soup = BeautifulSoup(page.text, "html.parser")
        spans = soup.find(class_='widget-currency_cash').find_all('span')
        for span in spans:
            list_currency.append(span.text)

        def format_currency(currency):
            return str(round(float(currency), 2))

        format_USD = f'üíµUSD:\n<b>–ö—É–ø—ñ–≤–ª—è:</b> {format_currency(list_currency[1])}\n' \
                     f'<b>–ü—Ä–æ–¥–∞–∂:</b> {format_currency(list_currency[4])}'
        format_EUR = f'üí∂EUR:\n<b>–ö—É–ø—ñ–≤–ª—è:</b> {format_currency(list_currency[7])}\n' \
                     f'<b>–ü—Ä–æ–¥–∞–∂:</b> {format_currency(list_currency[10])}'
        return f'{format_USD}\n{format_EUR}'


def insta_grabber(url_msg: str) -> str:
    parse_url = url_msg.split('/')
    if len(parse_url) <= 1:
        return '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –≤—ñ—Ä–Ω–µ'
    good_url = f'https://{parse_url[2]}/{parse_url[3]}/{parse_url[4]}?__a=1'
    page = requests.get(good_url)
    if page:
        take_json = page.json()['graphql']['shortcode_media']
        if take_json['__typename'] == 'GraphVideo':
            video = take_json['video_url']
            return f'<a href="{video}">–í—ñ–¥–µ–æ</a>'
        elif take_json['__typename'] == 'GraphImage':
            photo = take_json['display_url']
            return f'<a href="{photo}">–§–æ—Ç–æ</a>'


class DbFunction:
    @staticmethod
    def db_connect(sql, values=None):
        con = None
        try:
            con = psycopg2.connect(database=FOR_ALL_CASES_DB, user=FOR_ALL_CASES_USER, password=FOR_ALL_CASES_PWD,
                                   host=FOR_ALL_CASES_HOST, port=FOR_ALL_CASES_PORT)
            con.autocommit = True
            cur = con.cursor()
            if values:
                cur.execute(sql, values)
            else:
                cur.execute(sql)
            output = cur.fetchall()
            cur.close()
            return output
        except psycopg2.Error as error:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –±–∞–∑—ñ: {error}")
            return False
        finally:
            if con is not None:
                con.close()

    def last_uses(self, id_user):
        self.db_connect("update users set last_uses = now() where chat_id = %s returning last_uses", (id_user,))

    def check_admin(self, id_user):
        info = self.db_connect("select admin from users where chat_id = %s and admin ='1'", (id_user,))
        for values in info:
            if values:
                return True

    def check_user(self, user_id, first_name, user_name):
        logger.debug(f'Check USER {user_id}, {first_name}, {user_name}')
        info = self.db_connect("select chat_id from users where chat_id = %s", (user_id,))
        if not info:
            self.db_connect("insert into users (chat_id, tg_name, tg_user_name) values (%s, %s, %s) returning id",
                            (user_id, first_name, user_name,))

    def all_chat_id(self) -> list:
        return self.db_connect("select chat_id from users")

    def db_check_performer(self, id_user: str) -> bool:
        info = self.db_connect("select user_performer from users us "
                               "inner join performer_tbl pt on pt.performer_id = us.performer_id where chat_id = %s",
                               (id_user,))
        logger.debug(f'Check_performer: {info}')
        for values in info[0]:
            if values:
                return True
            else:
                return False

    def db_get_performer(self, id_user: str) -> tuple:
        info = self.db_connect("select user_performer, thumb_path from users us "
                               "inner join performer_tbl pt on pt.performer_id = us.performer_id where chat_id = %s",
                               (id_user,))
        logger.debug(f'Get_performer and thumb: {info}')
        for performer, thumb in info:
            return performer, thumb
